import os
import requests
from datetime import datetime, timezone, timedelta

# 定义源目录和输出目录
SOURCES_DIR = 'sources'
RULES_DIR = 'rules'

def get_beijing_time():
    """获取北京时间"""
    utc_now = datetime.now(timezone.utc)
    beijing_tz = timezone(timedelta(hours=8))
    return utc_now.astimezone(beijing_tz)

def process_rules():
    """
    主处理函数：读取源文件，获取、去重并写入规则。
    """
    # 确保输出目录存在
    if not os.path.exists(RULES_DIR):
        os.makedirs(RULES_DIR)

    # 遍历源目录下的所有 .txt 文件
    for source_file in os.listdir(SOURCES_DIR):
        if not source_file.endswith('.txt'):
            continue

        # 根据源文件名确定输出文件名
        output_name = os.path.splitext(source_file)[0]
        output_filename = output_name + '.list'
        output_path = os.path.join(RULES_DIR, output_filename)
        
        # 使用集合来自动去重
        unique_rules = set()
        
        source_path = os.path.join(SOURCES_DIR, source_file)
        print(f"[*] Processing {source_path} -> {output_path}")

        # 读取源文件中的所有 URL
        with open(source_path, 'r', encoding='utf-8') as f:
            urls = [line.strip() for line in f if line.strip() and not line.strip().startswith('#')]

        # 遍历 URL 并获取规则
        for url in urls:
            try:
                # 发起网络请求获取规则内容
                response = requests.get(url, timeout=30)
                response.raise_for_status() # 如果请求失败则抛出异常
                
                # 按行处理，忽略空行和注释
                lines = response.text.split('\n')
                rule_count = 0
                for line in lines:
                    # 清理规则，移除行内注释和多余空格
                    line = line.split('#')[0].strip()
                    if line:
                        unique_rules.add(line)
                        rule_count += 1
                print(f"  [+] Fetched {rule_count} rules from {url}")
            except requests.RequestException as e:
                print(f"  [!] Failed to fetch {url}: {e}")

        # 将去重和排序后的规则写入文件
        if unique_rules:
            sorted_rules = sorted(list(unique_rules))
            with open(output_path, 'w', encoding='utf-8') as f:
                # 写入文件头，包含更新时间和规则数量
                f.write(f"# RuleSet for Clash - {output_filename}\n")
                f.write(f"# Generated by Gemini & GitHub Actions\n")
                f.write(f"# Last Updated: {get_beijing_time().strftime('%Y-%m-%d %H:%M:%S CST')}\n")
                f.write(f"# Total Rules: {len(sorted_rules)}\n\n")
                f.write('\n'.join(sorted_rules))
            print(f"[*] Successfully wrote {len(sorted_rules)} unique rules to {output_path}\n")

if __name__ == '__main__':
    process_rules()
